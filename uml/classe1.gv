// http://fsteeg.com/notes/uml-class-diagrams-with-graphviz
// https://www.devmedia.com.br/modelagem-de-software-com-uml/20140
// https://www.graphviz.org/doc/info/attrs.html#k:arrowType


digraph hierarchy {
    rankdir=BT; // direção de baixo para o topo
    node[shape=record,style=filled,fillcolor=gray95];
    edge[arrowtail=none,minlen=2];

    Veiculo[label = <{Veiculo||+ locomover: void}>];

    {
        rank = same;
        VeiculoMotor[label = <{<I>VeiculoMotor</I>||}>];
        Motor[label = <{Motor||}>];
    }

    {
        rank = same;
        Carro[label = <{Carro||+ abrir(): void}>];
        Volante[label = <{Volante||}>];
    }

    {
        rank = same;
        Motocicleta[label = <{Motocicleta||}>];
        Guidao[label = <{Guidao||}>];
    }

    VeiculoMotor -> Veiculo[arrowhead=empty,style=dashed];
    Motor -> VeiculoMotor[arrowhead=diamond,taillabel="1"];

    Motocicleta -> VeiculoMotor[arrowhead=empty];
    Guidao -> Motocicleta[arrowhead=diamond,taillabel="1",constraint=false]; // constraint troca o lado

    Carro -> VeiculoMotor[arrowhead=empty];
    Volante -> Carro[arrowhead=diamond,taillabel="1"];
}
